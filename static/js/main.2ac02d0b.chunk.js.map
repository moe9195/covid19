{"version":3,"sources":["TimeGraph.js","PieChart.js","redux/actions/data.js","App.js","redux/actions/actionTypes.js","redux/reducers/data.js","redux/reducers/index.js","redux/index.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","countries","PieChart","state","selector","data","fetchCountriesDataSummary","a","get","response","setState","console","error","componentDidMount","getCountry","countriesObj","filter","country","includes","countryRegion","setUpChart","values","labels","key","push","handleOnClick","selected","plotData","this","buttons","map","className","onClick","type","textinfo","titlefont","size","bold","title","colorway","colormap","nshades","length","format","alpha","layout","font","color","showlegend","height","width","reverse","plot_bgcolor","paper_bgcolor","Component","countriesFull","isoDictionary","i","TimeGraph","logarithmic","fetchCountriesData","dict","countryData","result","capitalizeFirstLetter","string","charAt","toUpperCase","slice","getCountries","formatDate","date","mm","substring","dd","parseInt","setupTicks","arr","delta","l","Math","floor","newArr","handleSwitch","plotDataY","plotDataX","iso","countryObj","confirmedArr","deathsArr","recoveredArr","timeArr","counter","dateArr","confirmed","deaths","recovered","scatterData","select","trace","x","y","name","log","logType","class","id","for","xaxis","nticks","yaxis","App","countriesData","connect","dataState","dispatch","fetchCountryData","res","payload","initialState","reducer","action","rootReducer","combineReducers","dataReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2ac02d0b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport colormap from \"colormap\";\n\nconst countries = [\n  \"DZA\",\n  \"KWT\",\n  \"BHR\",\n  \"EGY\",\n  \"IRQ\",\n  \"JOR\",\n  \"LBN\",\n  \"LBY\",\n  \"MAR\",\n  \"OMN\",\n  \"QAT\",\n  \"SAU\",\n  \"SYR\",\n  \"TUN\",\n  \"ARE\",\n  \"SDN\"\n];\n\nconst countriesFull = [\n  \"Algeria\",\n  \"Kuwait\",\n  \"Bahrain\",\n  \"Egypt\",\n  \"Iraq\",\n  \"Jordan\",\n  \"Lebanon\",\n  \"Libya\",\n  \"Morocco\",\n  \"Oman\",\n  \"Qatar\",\n  \"Saudi Arabia\",\n  \"Syria\",\n  \"Tunisia\",\n  \"UAE\",\n  \"Sudan\"\n];\n\nconst isoDictionary = {};\nfor (let i = 0; i < countries.length; i++) {\n  isoDictionary[countries[i]] = countriesFull[i];\n}\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\"\n});\n\nclass TimeGraph extends Component {\n  state = {\n    data: null,\n    selector: \"confirmed\",\n    logarithmic: false\n  };\n\n  fetchCountriesData = async countries => {\n    try {\n      let dict = {};\n      for (let i = 0; i < countries.length; i++) {\n        let response = await instance.get(`country/${countries[i]}`);\n        let countryData = response.data.result;\n        dict[countries[i]] = countryData;\n      }\n      this.setState({ data: dict });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  componentDidMount = async () => {\n    this.fetchCountriesData(countries);\n  };\n\n  getCountries = () => {\n    const countriesObj = this.state.data;\n    if (countriesObj) {\n      return countriesObj;\n    }\n  };\n\n  formatDate = date => {\n    if (date == 0) {\n      return 0;\n    }\n    const monthNames = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ];\n\n    const mm = date.substring(5, 7);\n    const dd = date.substring(8, 11);\n    return monthNames[parseInt(mm) - 1] + \" \" + dd;\n  };\n\n  setupTicks = (arr, delta, date) => {\n    const l = arr.length;\n    delta = Math.floor(l / delta);\n    let newArr = [];\n    for (let i = 0; i < arr.length; i = i + delta) {\n      if (date) {\n        newArr.push(this.formatDate(arr[i]));\n      } else {\n        newArr.push(arr[i]);\n      }\n    }\n    return newArr;\n  };\n\n  handleOnClick = selected => {\n    this.setState({ selector: selected });\n  };\n  handleSwitch = () => {\n    this.setState({ logarithmic: !this.state.logarithmic });\n  };\n\n  render() {\n    const selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n\n    const buttons = selectors.map(selector => (\n      <button\n        className={\n          this.state.selector === selector\n            ? \"btn btn-outline-light active\"\n            : \"btn btn-outline-light\"\n        }\n        onClick={() => this.handleOnClick(selector)}\n      >\n        {selector}\n      </button>\n    ));\n\n    const data = this.getCountries();\n    let plotDataY = [[[]], [[]], [[]]],\n      plotDataX = [];\n    for (let iso in data) {\n      let countryObj = data[iso];\n      var confirmedArr = [],\n        deathsArr = [],\n        recoveredArr = [],\n        timeArr = [],\n        counter = 0,\n        dateArr = [];\n      for (let date in countryObj) {\n        var confirmed = countryObj[date].confirmed;\n        var deaths = countryObj[date].deaths;\n        var recovered = countryObj[date].recovered;\n        confirmedArr.push(confirmed);\n        deathsArr.push(deaths);\n        recoveredArr.push(recovered);\n        timeArr.push(counter);\n        dateArr.push(date);\n        counter++;\n      }\n      plotDataX.push(timeArr);\n      plotDataY[0].push(confirmedArr);\n      plotDataY[1].push(deathsArr);\n      plotDataY[2].push(recoveredArr);\n    }\n\n    let scatterData = [];\n    let select =\n      this.state.selector === \"confirmed\"\n        ? 0\n        : this.state.selector === \"deaths\"\n        ? 1\n        : 2;\n    for (let i = 1; i < plotDataX.length + 1; i++) {\n      var trace = {\n        x: dateArr,\n        y: plotDataY[select][i],\n        type: \"scatter\",\n        name: countriesFull[i - 1]\n      };\n      scatterData.push(trace);\n    }\n    console.log(\"test\");\n    var tickvals = [0],\n      ticktxt = [0];\n    if (plotDataX.length > 1 && dateArr.length > 1) {\n      tickvals = this.setupTicks(plotDataX[1], 25, false);\n      ticktxt = this.setupTicks(dateArr, 25, true);\n    }\n\n    let logType = this.state.logarithmic ? \"log\" : \"null\";\n    const colorway = colormap({\n      colormap: \"jet\",\n      nshades: countries.length,\n      format: \"hex\",\n      alpha: 1\n    });\n\n    return (\n      <div className=\"container-fluid\">\n        <br></br>\n        {buttons}\n        <div class=\"custom-control custom-switch\">\n          <input\n            type=\"checkbox\"\n            class=\"custom-control-input\"\n            onClick={() => this.handleSwitch()}\n            id=\"switch\"\n          />\n          <br />\n          <br />\n          <label class=\"custom-control-label\" for=\"switch\">\n            Logarithmic\n          </label>\n        </div>\n\n        <Plot\n          data={scatterData}\n          layout={{\n            title: `${this.capitalizeFirstLetter(this.state.selector)}`,\n            height: 600,\n            width: 800,\n            font: { color: \"white\", size: 12 },\n            xaxis: {\n              title: \"Date\",\n              nticks: 15\n            },\n            yaxis: { title: \"Number\", type: logType },\n            colorway: colorway,\n            plot_bgcolor: \"#161616\",\n            paper_bgcolor: \"#161616\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default TimeGraph;\n","import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport axios from \"axios\";\nimport colormap from \"colormap\";\n\nconst instance = axios.create({\n  baseURL: \"https://covid19.mathdro.id/api/confirmed\"\n});\n\nconst countries = [\n  \"Algeria\",\n  \"Kuwait\",\n  \"Bahrain\",\n  \"Egypt\",\n  \"Iraq\",\n  \"Jordan\",\n  \"Lebanon\",\n  \"Libya\",\n  \"Morocco\",\n  \"Oman\",\n  \"Qatar\",\n  \"Saudi Arabia\",\n  \"Syria\",\n  \"Tunisia\",\n  \"United Arab Emirates\",\n  \"Sudan\"\n];\n\nclass PieChart extends Component {\n  state = {\n    selector: \"confirmed\",\n    data: null\n  };\n\n  fetchCountriesDataSummary = async () => {\n    try {\n      let response = await instance.get(``);\n      let data = response.data;\n      this.setState({ data: data });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  componentDidMount = async () => {\n    this.fetchCountriesDataSummary();\n  };\n\n  getCountry = () => {\n    const countriesObj = this.state.data;\n    if (countriesObj) {\n      const result = countriesObj.filter(country =>\n        countries.includes(country.countryRegion)\n      );\n      return result;\n    }\n  };\n\n  setUpChart = (countriesObj, selector) => {\n    let values = [];\n    let labels = [];\n    for (let key in countriesObj) {\n      values.push(countriesObj[key][selector]);\n      labels.push(countriesObj[key][\"countryRegion\"]);\n    }\n    return [values, labels];\n  };\n\n  handleOnClick = selected => {\n    this.setState({ selector: selected });\n  };\n\n  render() {\n    const plotData = this.setUpChart(this.getCountry(), this.state.selector);\n\n    const selectors = [\"confirmed\", \"deaths\", \"recovered\"];\n\n    const buttons = selectors.map(selector => (\n      <button\n        className={\n          this.state.selector === selector\n            ? \"btn btn-outline-light active\"\n            : \"btn btn-outline-light\"\n        }\n        onClick={() => this.handleOnClick(selector)}\n      >\n        {selector}\n      </button>\n    ));\n\n    const data = [\n      {\n        values: plotData[0],\n        labels: plotData[1],\n        type: \"pie\",\n        textinfo: \"label+value\",\n        titlefont: {\n          size: 24,\n          bold: true\n        },\n        title:\n          this.state.selector === \"confirmed\"\n            ? \"Total Cases\"\n            : this.state.selector === \"deaths\"\n            ? \"Total Deaths\"\n            : \"Total Recoveries\"\n      }\n    ];\n    const colorway = colormap({\n      colormap: \"jet\",\n      nshades: countries.length,\n      format: \"hex\",\n      alpha: 1\n    });\n\n    return (\n      <div className=\"container-fluid\">\n        <br></br>\n        {buttons}\n        <br />\n        <Plot\n          data={data}\n          layout={{\n            font: { color: \"white\", size: 14 },\n            showlegend: false,\n            height: 670,\n            width: 670,\n            colorway: colorway.reverse(),\n            plot_bgcolor: \"#161616\",\n            paper_bgcolor: \"#161616\"\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default PieChart;\n","import { SET_COUNTRY } from \"./actionTypes\";\nimport axios from \"axios\";\n\n// const instance = axios.create({\n//   baseURL: \"https://covidapi.info/api/v1/\"\n// });\n\nconst instance = axios.create({\n  baseURL: \"https://covid19.mathdro.id/api/countries/\"\n});\n\n// export const fetchCountriesData = countries => async dispatch => {\n//   try {\n//     const countriesData = {};\n//     for (let i = 0; i < countries.length; i++) {\n//       const res = await instance.get(`country/${countries[i]}`);\n//       const countryData = res.data;\n//       countriesData[countries[i]] = countryData.result;\n//     }\n//     dispatch({ type: SET_COUNTRY_DATA, payload: countriesData });\n//   } catch (error) {\n//     console.error(error);\n//   }\n// };\n\nexport const fetchCountryData = country => async dispatch => {\n  try {\n    const res = await instance.get(`${country}`);\n    const countryData = res.data;\n    dispatch({ type: SET_COUNTRY, payload: countryData });\n  } catch (err) {\n    console.error(err);\n  }\n};\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport PieChart from \"./PieChart\";\nimport { fetchCountryData } from \"./redux/actions\";\nimport { connect } from \"react-redux\";\nimport TimeGraph from \"./TimeGraph\";\nimport \"./App.css\";\nimport \"./index.css\";\n\nconst countries = [\n  \"DZA\",\n  \"KWT\",\n  \"BHR\",\n  \"EGY\",\n  \"IRQ\",\n  \"JOR\",\n  \"LBN\",\n  \"LBY\",\n  \"MAR\",\n  \"OMN\",\n  \"QAT\",\n  \"SAU\",\n  \"SYR\",\n  \"TUN\",\n  \"ARE\",\n  \"YEM\",\n  \"SDN\"\n];\n\nconst instance = axios.create({\n  baseURL: \"https://covidapi.info/api/v1/\"\n});\n\nclass App extends Component {\n  state = {\n    countriesData: []\n  };\n\n  fetchCountriesData = async countries => {\n    try {\n      let dict = {};\n      for (let i = 0; i < countries.length; i++) {\n        let response = await instance.get(`country/${countries[i]}`);\n        let countryData = response.data.result;\n\n        dict[countries[i]] = countryData;\n      }\n      this.setState({ countriesData: dict });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  componentDidMount = async () => {\n    this.fetchCountriesData(countries);\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid text-center\">\n          <br />\n          <br />\n          <br />\n          <div className=\"row\">\n            <div className=\"col-6\">\n              <div className=\"card-transparent border\">\n                <PieChart />\n              </div>\n            </div>\n\n            <div className=\"col-6\">\n              <div className=\"card-transparent border\">\n                {\" \"}\n                <TimeGraph />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    countryData: state.dataState.countryData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchCountryData: country => dispatch(fetchCountryData(country))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const SET_COUNTRY_DATA = \"SET_COUNTRY_DATA\";\nexport const SET_COUNTRY = \"SET_COUNTRY\";\n","import { SET_COUNTRY } from \"../actions/actionTypes\";\n\nconst initialState = { countryData: null };\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_COUNTRY:\n      return {\n        ...state,\n        countryData: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport dataReducer from \"./data\";\n\nconst rootReducer = combineReducers({\n  dataState: dataReducer\n});\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\n// Data actions\n\nimport rootReducer from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport store from \"./redux\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nregisterServiceWorker();\n"],"sourceRoot":""}